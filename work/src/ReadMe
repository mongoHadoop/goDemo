Go版Hello World非常简单。在src/flysnow.org/hello/目录下运行go run main.go命令就可以看到打印的输出Hello World，下面解释下这段代码。

package 是一个关键字，定义一个包，和Java里的package一样，也是模块化的关键。
main包是一个特殊的包名，它表示当前是一个可执行程序，而不是一个库。
import 也是一个关键字，表示要引入的包，和Java的import关键字一样，引入后才可以使用它。
fmt是一个包名，这里表示要引入fmt这个包，这样我们就可以使用它的函数了。
main函数是主函数，表示程序执行的入口，Java也有同名函数，但是多了一个String[]类型的参数。
Println是fmt包里的函数，和Java里的system.out.println作用类似，这里输出一段文字。
整段代码非常简洁，关键字、函数、包等和Java非常相似，不过注意，go是不需要以;(分号)结尾的。
https://www.jianshu.com/p/eb35a47a157e

安装程序
安装的意思，就是生成可执行的程序，以供我们使用，为此go为我们提供了很方便的install命令，可以快速的把我们的程序安装到$GOAPTH/bin目录下。

go install flysnow.org/hello
打开终端，运行上面的命令即可，install后跟全路径的包名。 然后我们在终端里运行hello就看到打印的Hello World了。


➜  ~ hello
Hell World


跨平台编译
以前运行和安装，都是默认根据我们当前的机器生成的可执行文件，比如你的是Linux 64位，就会生成Linux 64位下的可执行文件，比如我的Mac，可以使用go env查看编译环境,以下截取重要的部分。

➜  ~ go env
GOARCH="amd64"
GOEXE=""
GOHOSTARCH="amd64"
GOHOSTOS="darwin"
GOOS="darwin"
GOROOT="/usr/local/go"
GOTOOLDIR="/usr/local/go/pkg/tool/darwin_amd64"
注意里面两个重要的环境变量GOOS和GOARCH,其中GOOS指的是目标操作系统，它的可用值为：

darwin
freebsd
linux
windows
android
dragonfly
netbsd
openbsd
plan9
solaris
一共支持10中操作系统。GOARCH指的是目标处理器的架构，目前支持的有：

arm
arm64
386
amd64
ppc64
ppc64le
mips64
mips64le
s390x
一共支持9中处理器的架构，GOOS和GOARCH组合起来，支持生成的可执行程序种类很多，具体组合参考https://golang.org/doc/install/source#environment。如果我们要生成不同平台架构的可执行程序，只要改变这两个环境变量就可以了，比如要生成linux 64位的程序，命令如下：

GOOS=linux GOARCH=amd64 go build flysnow.org/hello
前面两个赋值，是更改环境变量，这样的好处是只针对本次运行有效，不会更改我们默认的配置。

获取远程包
go提供了一个获取远程包的工具go get,他需要一个完整的包名作为参数，只要这个完成的包名是可访问的，就可以被获取到，比如我们获取一个CLI的开源库：

go get -v github.com/spf13/cobra/cobra
就可以下载这个库到我们$GOPATH/src目录下了，这样我们就可以像导入其他包一样import了。

特别提醒，go get的本质是使用源代码控制工具下载这些库的源代码，比如git，hg等，所以在使用之前必须确保安装了这些源代码版本控制工具。

作者：飞雪无情flysnow_org
链接：https://www.jianshu.com/p/eb35a47a157e
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。